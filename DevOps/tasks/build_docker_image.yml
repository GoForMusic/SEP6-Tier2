steps:
  - task: DockerCompose@0
    displayName: Build final image
    inputs:
      containerregistrytype: 'Container Registry'
      dockerComposeFile: '**/Docker/docker-compose.yml'
      dockerComposeFileArgs: TAG=$(Build.SourceVersion)
      action: 'Run a Docker Compose command'
      dockerComposeCommand: 'build'

  - task: DockerCompose@0
    displayName: Run tests inside container
    inputs:
      containerregistrytype: 'Container Registry'
      dockerComposeFile: '**/Docker/docker-compose.test.yml'
      dockerComposeFileArgs: TAG=$(Build.SourceVersion)
      action: 'Run a Docker Compose command'
      dockerComposeCommand: 'run'
      arguments: '--rm UnitTest'

  - task: PublishTestResults@2
    displayName: Publish test results
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: '/var/lib/docker/volumes/testResultVolume_$(Build.SourceVersion)/_data/*.trx'
      testResultsFormat: 'NUnit'
      failTaskOnFailedTests: true

  - task: PublishCodeCoverageResults@1
    displayName: Publish code coverage results
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: Cobertura
      pathToSources: $(System.DefaultWorkingDirectory)
      summaryFileLocation: '/var/lib/docker/volumes/testResultVolume_$(Build.SourceVersion)/_data/**/coverage.cobertura.xml'
      failIfCoverageEmpty: true

  - task: DockerCompose@0
    displayName: Clean up test container
    condition: always()
    inputs:
      containerregistrytype: 'Container Registry'
      dockerComposeFile: '**/Docker/docker-compose.test.yml'
      dockerComposeFileArgs: TAG=$(Build.SourceVersion)
      action: 'Run a Docker Compose command'
      dockerComposeCommand: 'down'
      arguments: '--volumes'